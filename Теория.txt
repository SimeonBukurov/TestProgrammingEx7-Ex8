Задача1.Lambda изразите са неименувани функции с параметри и тяло. Те най-често се четат като "се преобразува в/във" ; "отива в/във". Има четири вида на изписване на Lambda изразите:
-неявни Lambda изрази - Без явно изразени параметри:
-явни Lambda изрази - С изразени параметри:
-Без параметри - слагат се скоби без параметри:
-С повече параметри - използват се два или повече параметъра:

Задача2.LINQ е библиотека, която помага на потребителя при обработката на колекции.

Задача3.Делегат е променлива от референтен тип, която съдържа препратката към метод. Препратката може да бъде променена по време на изпълнение.Делегатите се използват особено за имплементиране на събития и методи за обратно извикване.Func и Action се реализират чрез делегати и сами по себе си са вградени делегати. Допускат до 15 параметъра, които са напълно достатъчни за практическа работа. Делегатът е специализиран клас често наричан (указател към функция)

Задача4.Събитията са съобщения(известия), играещи централна роля в .NET framework.Дават начина за  задействане на уведомления от потребителя или от обект. Събитията информират потребителя за настъпило действие или състояние в даден обект и дават информация, чрез EventArgs.Събитията дават възможността за абонамент за известия относно нещо, което се случва в обекта. При задействането на събитие всички, които са се абонирали получават известие.

Задача5.Изключенията снабдяват потребителя с надежден механизъм за централизирано улавяне на грешки и необичайни събития.Изместват подходът,при който всяка функция връща код за грешка. Опростяват построяването и поддържането на кода. Позволяват грешките да бъдат прихванати на множество нивa.Обработката на изключения C # е изградена върху четири ключови думи: try, catch, finally и throw.

Задача6.Шаблонните класове са класове, които за параметри използват неопределени типове като <T>.Шаблонните класове могат да имат няколко вида  типове параметри <T, U, V>.Ограничителите помагат да се ограничи типовия параметър.Той може да се ограничи до- референтен тип/конструктор/статичен базов тип и тн. Ограничителите могат да се комбинират.
Базов клас като ограничение
public void MyMethod< T >()
       where T : BaseClass
{
  ...
} 
Няколко базови класа и конструктор като комбинирано ограничение 
public void MyMethod< T >()
  where T : IComparable, MyBaseClass, new ()
{
  ...
}

